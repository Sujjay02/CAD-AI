# refinement_loop.py
import cadquery as cq
import os
from kronoslabs import KronosLabs
import json

# ==============================
# üîß Setup
# ==============================

ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
MODELS_DIR = os.path.join(ROOT_DIR, "models")
os.makedirs(MODELS_DIR, exist_ok=True)

# ‚úÖ Initialize AI client (replace with your real key or env var)
API_KEY = os.getenv("KRONOS_API_KEY", "kl_ee83673ca58773041338f9db70d600e0d6f6c6124e71cdff15728f62b9c3417a")
client = KronosLabs(api_key=API_KEY)

# Store chat history so AI can remember past changes
history = [
    {"role": "system", "content": "You are a CAD assistant that writes valid CadQuery code. \
Respond only with Python code that modifies the current model. \
Use variables like 'model' which is a cq.Workplane. Do not include explanations."}
]

# Initialize a blank model
model = cq.Workplane("XY")

print("üí¨ CAD AI Refinement Mode started.")
print("Type natural-language commands to modify the model.")
print("Type 'export' to save the current model or 'exit' to quit.\n")

# ==============================
# üß© Helper: Execute AI code safely
# ==============================
def apply_cad_code(code_snippet: str):
    """Safely run CadQuery code generated by the AI."""
    global model
    try:
        # Execute code snippet in restricted environment
        exec(code_snippet, {"cq": cq, "model": model})
        print("‚úÖ Successfully applied AI update.\n")
    except Exception as e:
        print(f"‚ùå Error running AI code:\n{e}\n")

# ==============================
# üîÅ Chat Loop
# ==============================
while True:
    user_input = input("üß† You: ")

    if user_input.lower() in ["exit", "quit"]:
        print("üëã Exiting refinement loop.")
        break

    if user_input.lower().startswith("export"):
        # Export current model
        filename = user_input.split(" ", 1)[-1] if " " in user_input else "ai_model.stl"
        output_path = os.path.join(MODELS_DIR, filename)
        cq.exporters.export(model, output_path)
        print(f"üíæ Exported model to: {output_path}\n")
        continue

    # Add user input to chat history
    history.append({"role": "user", "content": user_input})

    # Send chat to KronosLabs
    response = client.chat.completions.create(
        prompt=history,
        model="hermes",
        temperature=0.3,
        is_stream=False
    )

    ai_message = response.choices[0].message.content
    print(f"\nü§ñ AI:\n{ai_message}\n")

    # Save to history
    history.append({"role": "assistant", "content": ai_message})

    # Run generated code
    apply_cad_code(ai_message)
